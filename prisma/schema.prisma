generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vendor {
  vendor_id            String   @id @default(uuid())
  business_name        String
  legal_name           String
  gstin                String?  @unique
  pan                  String?  @unique
  commission_rate      Float    @default(0)
  onboarding_completed Boolean  @default(false)
  vendor_name          String
  vendor_email         String   @unique
  vendor_phone         String
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  bank_details BankDetail?
  category     Category[]
  documents    VendorDocument[]
  team         VendorUser[]
  warehouse    Warehouse?

  @@index([vendor_email])
  @@index([vendor_phone])
  @@index([business_name])
  @@index([onboarding_completed])
}

model VendorUser {
  vendor_user_id String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  role           VendorRole @default(VENDOR_ADMIN)
  vendor_id      String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  vendor         Vendor     @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([email])
  @@index([role])
}

model BankDetail {
  bank_detail_id String   @id @default(uuid())
  account_name   String
  account_number String
  ifsc_code      String
  bank_name      String
  branch_name    String?
  is_verified    Boolean  @default(false)
  vendor_id      String   @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  vendor         Vendor   @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([is_verified])
}

model VendorDocument {
  id          String   @id @default(uuid())
  vendor_id   String
  name        String
  url         String
  type        String?
  uploaded_at DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
}

model Warehouse {
  warehouse_id        String                      @id @default(uuid())
  address             String
  city                String
  state               String
  country             String                      @default("India")
  pincode             String
  latitude            Float?
  longitude           Float?
  contact_person      String?
  contact_phone       String?
  verified_at         DateTime?
  is_primary          Boolean                     @default(false)
  verification_status WarehouseVerificationStatus @default(PENDING)
  vendor_id           String                      @unique
  created_at          DateTime                    @default(now())
  updated_at          DateTime                    @updatedAt
  vendor              Vendor                      @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([verification_status])
  @@index([city, state])
  @@index([pincode])
}

model Category {
  id                 String             @id @default(uuid())
  category_id        String             @unique
  name               String
  image_url          String?
  is_public          Boolean            @default(false)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  subcategory_groups SubcategoryGroup[]

  vendor    Vendor[]

  @@index([is_public])
}

model SubcategoryGroup {
  group_id      String        @id @default(uuid())
  name          String        @unique
  is_public     Boolean       @default(false)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  id            String
  subcategories Subcategory[]
  category      Category      @relation(fields: [id], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([is_public])
}

model Subcategory {
  subcategory_id    String           @id @default(uuid())
  name              String
  image_url         String?
  is_public         Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  group_id          String
  subcategory_group SubcategoryGroup @relation(fields: [group_id], references: [group_id], onDelete: Cascade)

  @@unique([name, group_id])
  @@index([group_id])
  @@index([is_public])
}

enum VendorRole {
  VENDOR_ADMIN
  PRODUCT_ADMIN
}

enum WarehouseVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model PasswordReset {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([token])
}