generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CmsUser {
  cms_user_id   String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String
  mobile_number String   @unique
  role          CMSRole
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  otps          Otp[]    @relation("CmsUserOtps")

  @@index([role])
  @@index([email])
}

model Vendor {
  vendor_id            String           @id @default(uuid())
  business_name        String
  legal_name           String
  gstin                String?          @unique
  pan                  String?          @unique
  commission_rate      Float            @default(0)
  onboarding_completed Boolean          @default(false)
  email                String           @unique
  phone                String
  password             String
  role                 VendorRole       @default(VENDOR_ADMIN)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  name                 String
  bank_details         BankDetail?
  orders               Order[]
  products             Product[]
  documents            VendorDocument[]
  team                 VendorUser[]
  warehouse            Warehouse?

  @@index([email])
  @@index([phone])
  @@index([business_name])
  @@index([role])
  @@index([onboarding_completed])
}

model BankDetail {
  bank_detail_id String   @id @default(uuid())
  account_name   String
  account_number String
  ifsc_code      String
  bank_name      String
  branch_name    String?
  is_verified    Boolean  @default(false)
  vendor_id      String   @unique
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  vendor         Vendor   @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([is_verified])
}

model VendorDocument {
  id          String   @id @default(uuid())
  vendor_id   String
  name        String
  url         String
  uploaded_at DateTime @default(now())
  vendor      Vendor   @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
}

model VendorUser {
  vendor_user_id String     @id @default(uuid())
  name           String
  email          String     @unique
  password       String
  role           VendorRole
  vendor_id      String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  vendor         Vendor     @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([email])
  @@index([role])
}

model Warehouse {
  warehouse_id        String                      @id @default(uuid())
  address             String
  city                String
  state               String
  country             String                      @default("India")
  pincode             String
  latitude            Float?
  longitude           Float?
  contact_person      String?
  contact_phone       String?
  verified_at         DateTime?
  is_primary          Boolean                     @default(false)
  verification_status WarehouseVerificationStatus @default(PENDING)
  vendor_id           String                      @unique
  created_at          DateTime                    @default(now())
  updated_at          DateTime                    @updatedAt
  vendor              Vendor                      @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([verification_status])
  @@index([city, state])
  @@index([pincode])
}

model Category {
  category_id        String             @id @default(uuid())
  name               String             @unique
  image_url          String?
  is_public          Boolean            @default(false)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  subcategory_groups SubcategoryGroup[]

  @@index([is_public])
}

model SubcategoryGroup {
  group_id      String        @id @default(uuid())
  name          String        @unique
  is_public     Boolean       @default(false)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  category_id   String
  subcategories Subcategory[]
  category      Category      @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  @@index([category_id])
  @@index([is_public])
}

model Subcategory {
  subcategory_id    String           @id @default(uuid())
  name              String
  image_url         String?
  is_public         Boolean          @default(false)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  group_id          String
  products          Product[]
  subcategory_group SubcategoryGroup @relation(fields: [group_id], references: [group_id], onDelete: Cascade)

  @@unique([name, group_id])
  @@index([group_id])
  @@index([is_public])
}

model Product {
  product_id           String             @id @default(uuid())
  title                String
  description          String?
  price                Float?
  stock                Int
  status               ProductStatus      @default(PENDING)
  thumbnail            String?
  thumbnail_url        String?
  product_title        String?
  product_brand        String?
  type_product         String?
  skn                  String?
  fragile              Boolean?
  free_delivery        Boolean?
  is_deleted           Boolean?
  is_public            Boolean?
  refund_policy        String?
  shipping_cost_factor Float?
  created_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  vendor_id            String
  subcategory_id       String?
  inventory            Inventory[]
  subcategory          Subcategory?       @relation(fields: [subcategory_id], references: [subcategory_id])
  vendor               Vendor             @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)
  attributes           ProductAttribute[]
  history              ProductHistory[]
  images               ProductImage[]
  variants             ProductVariant[]

  @@index([vendor_id])
  @@index([subcategory_id])
  @@index([status])
  @@index([created_at])
  @@index([title])
  @@index([price])
  @@index([stock])
  @@index([product_brand])
  @@index([is_public])
  @@index([is_deleted])
}

model ProductHistory {
  history_id String   @id @default(uuid())
  action     String
  comment    String?
  product_id String
  created_by String
  created_at DateTime @default(now())
  product    Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@index([product_id])
  @@index([created_at])
  @@index([action])
}

model Order {
  order_id               String      @id @default(uuid())
  status                 OrderStatus @default(RECEIVED)
  amount                 Float
  product_json           Json
  tracking_url           String?
  shiprocket_order_id    String?
  shiprocket_shipment_id String?
  expected_delivery_date DateTime?
  actual_delivery_date   DateTime?
  created_at             DateTime    @default(now())
  updated_at             DateTime    @updatedAt
  vendor_id              String
  vendor                 Vendor      @relation(fields: [vendor_id], references: [vendor_id], onDelete: Cascade)

  @@index([vendor_id])
  @@index([status])
  @@index([created_at])
  @@index([expected_delivery_date])
  @@index([shiprocket_order_id])
  @@index([shiprocket_shipment_id])
}

model ProductVariant {
  variant_id             String         @id @default(uuid())
  variant_title          String
  variant_value          String
  sku                    String         @unique
  variant_price          Float?
  variant_discount_price Float?
  is_default             Boolean        @default(false)
  stock_quantity         Int?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  product_id             String
  inventory              Inventory[]
  images                 ProductImage[]
  product                Product        @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  sub_variants           SubVariant[]

  @@index([product_id])
  @@index([sku])
  @@index([is_default])
  @@index([variant_title, variant_value])
}

model SubVariant {
  sub_variant_id       String         @id @default(uuid())
  sub_variant_title    String
  sub_variant_value    String
  sku                  String         @unique
  sub_variant_price    Float
  sub_variant_discount Float?
  is_default           Boolean        @default(false)
  stock_quantity       Int?
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt
  variant_id           String
  inventory            Inventory[]
  productVariant       ProductVariant @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)

  @@index([variant_id])
  @@index([sku])
  @@index([is_default])
  @@index([sub_variant_title, sub_variant_value])
}

model ProductImage {
  image_id           String          @id @default(uuid())
  image_url          String
  is_default         Boolean         @default(false)
  product_id         String
  product_variant_id String?
  product            Product         @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  productVariant     ProductVariant? @relation(fields: [product_variant_id], references: [variant_id], onDelete: Cascade)

  @@index([product_id])
  @@index([product_variant_id])
  @@index([is_default])
}

model ProductAttribute {
  attributes_id    String  @id @default(uuid())
  attributes_title String
  attribute_value  Json
  product_id       String
  product          Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@index([product_id])
  @@index([attributes_title])
}

model Inventory {
  inventory_id     String          @id @default(uuid())
  quantity         Int             @default(0)
  safety_stock     Int?
  reorder_level    Int?
  reorder_quantity Int?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  product_id       String
  variant_id       String?
  sub_variant_id   String?
  product          Product         @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  sub_variant      SubVariant?     @relation(fields: [sub_variant_id], references: [sub_variant_id], onDelete: Cascade)
  product_variant  ProductVariant? @relation(fields: [variant_id], references: [variant_id], onDelete: Cascade)

  @@unique([product_id, variant_id, sub_variant_id])
  @@index([product_id])
  @@index([variant_id])
  @@index([sub_variant_id])
  @@index([quantity])
}

model PasswordReset {
  id         String   @id @default(uuid())
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([user_id])
  @@index([token])
  @@index([expires_at])
}

model Otp {
  otp_id         String   @id @default(uuid())
  otp            String
  otp_expiration DateTime
  mobile_number  String
  user_id        String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  relatedCmsUser CmsUser? @relation("CmsUserOtps", fields: [user_id], references: [cms_user_id], onDelete: Cascade, map: "otp_cmsuser_fkey")

  @@index([user_id])
}

model TokenBlacklist {
  id         String   @id @default(uuid())
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())

  @@index([token])
  @@index([expires_at])
}

enum CMSRole {
  SUPER_ADMIN
  ADMIN
  PRODUCT_ADMIN
}

enum VendorRole {
  VENDOR_ADMIN
  PRODUCT_ADMIN
}

enum WarehouseVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ProductStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  LIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  RECEIVED
  PROCESSING
  PACKED
  SHIPPED
  DELIVERED
}
